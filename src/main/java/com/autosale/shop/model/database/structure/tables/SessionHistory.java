/*
 * This file is generated by jOOQ.
 */
package structure.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import structure.Keys;
import structure.Public;
import structure.tables.records.SessionHistoryRecord;

import java.time.LocalDateTime;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SessionHistory extends TableImpl<SessionHistoryRecord> {

    /**
     * The reference instance of <code>public.session_history</code>
     */
    public static final SessionHistory SESSION_HISTORY = new SessionHistory();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.session_history.time</code>.
     */
    public final TableField<SessionHistoryRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");
    /**
     * The column <code>public.session_history.message</code>.
     */
    public final TableField<SessionHistoryRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR, this, "");

    private SessionHistory(Name alias, Table<SessionHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SessionHistory(Name alias, Table<SessionHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.session_history</code> table reference
     */
    public SessionHistory(String alias) {
        this(DSL.name(alias), SESSION_HISTORY);
    }

    /**
     * Create an aliased <code>public.session_history</code> table reference
     */
    public SessionHistory(Name alias) {
        this(alias, SESSION_HISTORY);
    }

    /**
     * Create a <code>public.session_history</code> table reference
     */
    public SessionHistory() {
        this(DSL.name("session_history"), null);
    }

    public <O extends Record> SessionHistory(Table<O> child, ForeignKey<O, SessionHistoryRecord> key) {
        super(child, key, SESSION_HISTORY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionHistoryRecord> getRecordType() {
        return SessionHistoryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SessionHistoryRecord> getPrimaryKey() {
        return Keys.LOGS_PKEY;
    }

    @Override
    public SessionHistory as(String alias) {
        return new SessionHistory(DSL.name(alias), this);
    }

    @Override
    public SessionHistory as(Name alias) {
        return new SessionHistory(alias, this);
    }

    @Override
    public SessionHistory as(Table<?> alias) {
        return new SessionHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHistory rename(String name) {
        return new SessionHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHistory rename(Name name) {
        return new SessionHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionHistory rename(Table<?> name) {
        return new SessionHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<LocalDateTime, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
