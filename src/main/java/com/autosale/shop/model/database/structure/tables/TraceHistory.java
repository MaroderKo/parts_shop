/*
 * This file is generated by jOOQ.
 */
package structure.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import structure.Keys;
import structure.Public;
import structure.tables.records.TraceHistoryRecord;

import java.time.LocalDateTime;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraceHistory extends TableImpl<TraceHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trace_history</code>
     */
    public static final TraceHistory TRACE_HISTORY = new TraceHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraceHistoryRecord> getRecordType() {
        return TraceHistoryRecord.class;
    }

    /**
     * The column <code>public.trace_history.time</code>.
     */
    public final TableField<TraceHistoryRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.trace_history.message</code>.
     */
    public final TableField<TraceHistoryRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR, this, "");

    private TraceHistory(Name alias, Table<TraceHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TraceHistory(Name alias, Table<TraceHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.trace_history</code> table reference
     */
    public TraceHistory(String alias) {
        this(DSL.name(alias), TRACE_HISTORY);
    }

    /**
     * Create an aliased <code>public.trace_history</code> table reference
     */
    public TraceHistory(Name alias) {
        this(alias, TRACE_HISTORY);
    }

    /**
     * Create a <code>public.trace_history</code> table reference
     */
    public TraceHistory() {
        this(DSL.name("trace_history"), null);
    }

    public <O extends Record> TraceHistory(Table<O> child, ForeignKey<O, TraceHistoryRecord> key) {
        super(child, key, TRACE_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TraceHistoryRecord> getPrimaryKey() {
        return Keys.LOGS_PKEY;
    }

    @Override
    public TraceHistory as(String alias) {
        return new TraceHistory(DSL.name(alias), this);
    }

    @Override
    public TraceHistory as(Name alias) {
        return new TraceHistory(alias, this);
    }

    @Override
    public TraceHistory as(Table<?> alias) {
        return new TraceHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TraceHistory rename(String name) {
        return new TraceHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraceHistory rename(Name name) {
        return new TraceHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraceHistory rename(Table<?> name) {
        return new TraceHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<LocalDateTime, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
